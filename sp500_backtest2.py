# -*- coding: cp1252 -*-
# generated by GPT.
# run from prompt: streamlit run sp500_backtest.py
# backtest2.py plots +/- 1.5 std
#
import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Set up the Streamlit interface
st.title("S&P 500 Backtest & Monte Carlo Simulation")
st.write("This app simulates the backtest performance and Monte Carlo projections for a given initial investment amount and term in years against the S&P 500 using historical data.")

# Input from the user
initial_amount = st.number_input("Enter Initial Investment Amount ($):", min_value=100.0, value=1000.0)
years = st.number_input("Enter Term (Years):", min_value=1, max_value=100, value=10)

# Fetch S&P 500 data
@st.cache_data
def fetch_sp500_data():
    sp500 = yf.Ticker("^GSPC")
    data = sp500.history(period="max")
    data = data[['Close']]
    data.reset_index(inplace=True)
    return data

data = fetch_sp500_data()

# Calculate the backtest performance
def calculate_backtest(data, initial_amount, years):
    if years * 252 > len(data):
        st.warning("Insufficient data for the specified term. Reduce the term in years.")
        return None

    # Calculate yearly performance
    data['Year'] = data['Date'].dt.year
    yearly_data = data.groupby('Year').last().reset_index()

    # Calculate performance for the last 'years' term
    term_start_year = yearly_data['Year'].max() - years
    term_data = yearly_data[yearly_data['Year'] > term_start_year]

    if len(term_data) < years:
        st.warning("Insufficient data for the specified term. Reduce the term in years.")
        return None

    # Calculate cumulative returns
    start_price = term_data.iloc[0]['Close']
    end_price = term_data.iloc[-1]['Close']
    cumulative_return = (end_price / start_price) - 1
    final_amount = initial_amount * (1 + cumulative_return)

    return cumulative_return, final_amount, term_data

# Monte Carlo Simulation Function
def monte_carlo_simulation(data, initial_amount, years, num_simulations=100):
    # Calculate daily returns
    data['Daily Return'] = data['Close'].pct_change()
    daily_returns = data['Daily Return'].dropna()

    # Run simulations
    simulations = []
    days = years * 252  # Approximate trading days in the term

    for _ in range(num_simulations):
        simulated_prices = [initial_amount]
        for _ in range(days):
            simulated_prices.append(simulated_prices[-1] * (1 + np.random.choice(daily_returns)))
        simulations.append(simulated_prices)

    # Convert to DataFrame for analysis
    simulation_df = pd.DataFrame(simulations).T
    median_simulation = simulation_df.median(axis=1)
    std_dev = simulation_df.std(axis=1)
    
    # Calculate ±1.5 standard deviation
    upper_bound = median_simulation + 1.5 * std_dev
    lower_bound = median_simulation - 1.5 * std_dev

    # Extract yearly values for the table
    yearly_indices = [(i + 1) * 252 for i in range(years)]
    yearly_median = median_simulation.iloc[yearly_indices].values
    yearly_upper = upper_bound.iloc[yearly_indices].values
    yearly_lower = lower_bound.iloc[yearly_indices].values

    return median_simulation, upper_bound, lower_bound, yearly_median, yearly_upper, yearly_lower

# Perform calculation and display results
if st.button("Run Backtest"):
    result = calculate_backtest(data, initial_amount, years)
    
    if result:
        cumulative_return, final_amount, term_data = result
        st.write(f"**Initial Amount:** ${initial_amount:,.2f}")
        st.write(f"**Term:** {years} years")
        st.write(f"**Cumulative Return:** {cumulative_return * 100:.2f}%")
        st.write(f"**Final Amount:** ${final_amount:,.2f}")

        # Plot the performance
        fig, ax = plt.subplots()
        ax.plot(term_data['Year'], term_data['Close'], marker='o', linestyle='-')
        ax.set_title(f"S&P 500 Performance Over the Last {years} Years")
        ax.set_xlabel("Year")
        ax.set_ylabel("S&P 500 Index Level")
        st.pyplot(fig)

# Monte Carlo Simulation Section
if st.button("Run Monte Carlo Simulation"):
    median_sim, upper_bound, lower_bound, yearly_median, yearly_upper, yearly_lower = monte_carlo_simulation(data, initial_amount, years)

    # Plot the simulation results
    fig, ax = plt.subplots()
    ax.plot(median_sim, label='Median Simulation', color='blue')
    ax.fill_between(range(len(median_sim)), lower_bound, upper_bound, color='lightgray', alpha=0.5, label='±1.5 Std Dev')
    ax.set_title(f"Monte Carlo Simulation - {years} Years")
    ax.set_xlabel("Days")
    ax.set_ylabel("Portfolio Value ($)")
    ax.legend()
    st.pyplot(fig)

    # Create a DataFrame for the yearly results
    year_labels = [f"Year {i+1}" for i in range(years)]
    result_df = pd.DataFrame({
        "Year": year_labels,
        "Median ($)": yearly_median,
        "Median + 1.5 Std Dev ($)": yearly_upper,
        "Median - 1.5 Std Dev ($)": yearly_lower
    })

    # Display the results in a table
    st.write("### Yearly Projected Portfolio Value")
    st.table(result_df)
